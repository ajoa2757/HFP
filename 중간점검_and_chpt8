# HFP
Head_First_Python

==================================
vsaerch 를 만들기 까지의 과정 정리.


0. phrase 로부터 letters 의 교집합을 찾아내는 함수는, 단순히 set 자료형의 메서드로서 처리된다.

1. /entry 페이지를 만들어야 한다. 
ㄴ>이 페이지는 flask 의 POST 메서드, 그 내부에 포함된 form 이라는 딕셔너리, request 로 가져오기. 등을 필요로 한다.
ㄴ>사용자는 entry 페이지에서 form 딕셔너리에 값을 입력하게 된다.

ㄴ>html 문법으로 작성된 템플릿은, flask 의 render_template 으로 파이썬 코드를 통해 웹 페이지로 완성된다.

2. /search4 페이지를 만들어야 한다.
ㄴ>사용자는 앞서 form 에 제출한 phrase 와 letters 에 기반하여 결과값을 받고 싶다.
ㄴ>form 에서 값을 참조할 수 있도록 함수 장식자에 POST 메서드에 대한 내용이 추가되어 있다.
ㄴ>앞서 입력된, form 에서 참조한 phrase 와 letters 를 가지고 최초 set() 함수의 결괏값 result 가 생성된다.
ㄴ>수집한 조각들이 html template 에 전달된다.

3. /viewlog 페이지를 만들어야 한다.
ㄴ>flask 에서 request 를 하면 받아볼 수 있는 각종 정보들을 어딘가에 보관하고 싶다.
ㄴ>파일 스트림을 통해 .log 파일을 조작하도록 하여, .log 파일이 생성되고, print 를 통해 입력되도록 한다.
ㄴ>viewlog 웹페이지에 들어가면, 한 행씩 이 log 파일을 읽도록 해 놓는다.

4. /viewlog 페이지를 개선하고자 한다.
ㄴ>텍스트 파일이 아니라, MySQL 데이터베이스를 사용한 방식으로 로그를 기록하고 싶다.
ㄴ>MySQL 을 설치하고, 서버를 실행시키는 기초 과정이 필요하다.

ㄴ>그 다음 본격적으로 mysql 을, 'C:\Program Files\MySQL\MySQL Server 8.0\bin' 경로에서 실행시켜야 한다.
ㄴ>.\mysql 로 접속 명령어를 시작해야 한다. 단순히 mysql 로 접속 명령어를 실행시키려고 하면 안된다. (구버전과의 차이점)

ㄴ>데이터베이스를 만들고, 유저를 만들고, 유저에게 데이터베이스에 대한 권한을 grant 한다.
ㄴ>grant 로 유저를 만들 수 없다. 손수 유저를 꼭 만들어 주어야 한다 (구버전과의 차이점)
ㄴ>mysql 의 여러 명렁어 - describe, show, select - 들을 사용해 본다.

ㄴ>이제 파이썬 커넥터를 사용하여, .py 코드에서 mysql 데이터베이스를 조작해 본다.
ㄴ>이를 위해서, 파이썬 커넥터를 import 하고, 입력 레퍼런스를 선언하고, 입력 레퍼런스로부터 커서를 생성한다.
ㄴ>이제 커서에 SQL 질의(=명령문)을 전달하고, execute 하여 MySQL 데이터베이스를 파이썬 코드로 조작할 수 있다.

ㄴ> log_request 함수를 위에 나온 방법들을 통하여 개선한다. insert 질의를 통해 데이터베이스의 테이블에 로그를 삽입한다.
ㄴ> 생성된 데이터베이스를 우리는 보고 싶다. 파일 스트림과 .log 파일을 통한 로그 확인을 하였을 때를 생각해 보자.
ㄴ> 그때는, with 문과 파일 스트림을 사용하여, log 파일을 한 행 씩 읽고 출력할 수 있었다.
ㄴ> 데이터베이스에 대하여도 with 문을 사용할 수 있지만, 컨텍스트 관리 프로토콜 이라는 기능을 사용할 줄 알아야 한다.

ㄴ> /viewlog 를 개선시키기 위해 chpt8 에서 객체 지향에 대해 배운다.

==================
파이썬 클래스

가볍게 CountFromBy 라는 클래스를 만들면서 파이썬의 클래스 구현에 대해 공부해 본다.

1. CFB는 현재 값인 value, 증가량인 increment 두개의 멤버변수를 지니고 있다.
2. 생성자를 통해 value 와 increment 를 초기화할 수 있는 코드를 만들 것이다.
3. increase 함수를 통해, value 를 increment 만큼 증가시킬 것이다.

=================
생성자 : __init__

C++ 스타일의 생성자와는 다르게, 파이썬의 생성자는 연산자 오버로드를 통해 이루어진다.

던더+@ 계통의 함수들은 모두 연산자를 재정의하는데 쓰이는 포멧이다.

그중에서도 init은 괄호 연산자의 동작을 정의한다.

def __init__(self, v:int = 0, i:int = 1) -> None:
  self.val = v
  self.incr = i

ㄴ>이것이 정의행이다. 첫번째 매개변수는 항상 self 이다. 이것은 C++에서의 this 포인터와 흡사한 동작을 한다. 
ㄴ>self 는 단지 정의행에서 필요할 뿐, 함수 사용 시에는 따로 self 를 전달한다던지 할 필요는 없다.
ㄴ>매개변수 안의 콜론은 전달해야할 자료형을 미리 알려주는 그거다. 
ㄴ>'=' 기호를 통해, C++과 거의 같은 스타일로 매개변수가 전달되고 있음을 알 수 있다.
ㄴ>던더 init 내부에서 val 과 incr 두개의 변수가 선언과 동시에 정의되고 있다.

ㄴ>만약 CFB 생성자에 정수가 하나만 전달되면, 그것은 왼쪽에 있는 변수에 가장 먼저 할당된다.
==================
print & shell 에 대한 동작 : __repr__

던더 repr 은 객체가 쉘이나 print 에 전달되었을 때 수행할 동작을 결정한다.

우리는 CFB 가 print 되거나 쉘에 전달되었을 때 value 의 값을 알고 싶다.

그렇다면, 던더 repr 밑에 print self.value 하도록 하면 되는 것이다.



