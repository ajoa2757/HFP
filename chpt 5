# HFP
Head_First_Python

웹앱 만들기

============================
Flask 

플라스크는 파이썬으로 간단한 웹 앱을 만드는 도구이다. 

flask 에서 Flask 를 import 하여 시작한다.

###############

from flask import Flask 


app = Flask(__name__) 

@app.route('/')
def hello() -> str:
  
  return 'hello flask'

@app.route('/search4')
def 
...
###############

위와 같이 파이썬 코드를 작성한다.

@app.route 로 시작하는 구절들은, 그 다음 함수의 리턴에 따른 내 사이트의 해당 주소로 진입하였을 때의 동작을 정의한다.

html 이 리턴된다면 해당 웹페이지를 리턴한다.
str을 리턴한다면 그냥 해당 페이지에 문자열을 출력한다.

=================
render_template

이 메서드는 리턴할 html 을 매개변수들을 받아다가 구성해 준다. 

app.route 의 경로에 html 이 리턴되는 경우 이 메서드로 웹 페이지를 구성해서 넘겨주어야 한다.

이 메서드는 flask 내부의 render 서브모듈을 import 해야 사용 가능하다.

==================
render_template 의 매개변수들

1. html 파일

해당 웹 페이지를 구성하는 템플릿이다. html 문법으로 작성되어야 한다.

중괄호 두개로 매개변수들이 선언되어 있다. 

2. 매개변수들

웹 페이지에 선언된 매개변수의 이름대로, 보통 키워드 전달 기법으로 매개변수들이 전달된다
ㄴ>... ,the_title = title, ... 이런 식.


제대로 정리하고 가자. render_template() 는 @app.route 장식자가 달린 함수의 리턴값이다.

그 함수 내부에, render_template() 에 전달되는 웹 페이지 매개변수들은 이미 선언되고 정의되어 있어야 한다.

title 처럼 단순 string 의 경우 그냥 문자열이면 된다.

search_for_letters 의 결과물 set 역시 , str() 안에 전달하여 문자열로 전달할 수 있다.


3. 입력을 요구하는 매개변수들

flask 내부에 있는 request 메서드로, 웹 페이지에서 사용자의 입력을 받을 수 있다.

phrase = request.form['phrase']
ㄴ>이것이 request.form 의 사용법이다. 
ㄴ>사용자의 입력은 entry html 에서 이루어진다.
ㄴ>위의 명령은 사실 entry 에서 넘어온 것을 전달받는 것 뿐이긴 하다.

위의 코드는 /search4 영역에서의 동작이다. 이때 'phrase' 는 웹 페이지의 대문인 entry 에서 전달된 인자이다.

entry의 내부에는, phrase 를 입력받고 /search4 로 연결되는 코드가 입력되어 있다.

=====================
redirect

entry & search4 URL 이 완성되고 나면, 기본 '/' URL 은 쓸모가 없어진다.

이때, 해당 함수(여기선 hello flask 함수)가 redirect를 의미하는 '302'를 리턴하도록 고치고,

반환을 return redirect('/entry') 로 고치고 나면 이제 '/' URL 로의 연결은 entry 로 재전송된다.

======================
장식자 중복

사실 위와 같은 기법은 장식자를 중복해서 달아주면 필요가 없을 수 있다.

@app.route 장식자를 사용하여 URL 을 지정해 주었던 행을, /entry 의 본래 장식자 바로 위로 옮겨주기만 하면,

@app.route('/')
@app.route('/entry')
def ...

ㄴ>이러면, 같은 html 이 두개의 URL 을 지닐 수 있게 된다. 
