# HFP
Head_First_Python

====================
dictionary

C++ map 과 같다. 

Kevin = {'Key' : 'Value' , 'Gender' : 'Male' , 'Age' : '24', ....}
ㄴ>dict는 반드시 중괄호를 사용하여 선언된다.

와 같이 선언되며, 출력도 마찬가지로 중괄호로 출력된다. 

Kevin['Key'] 로 Key값에 할당된 Value를 찾을 수 있다. 입력순서는 실제 순서와 관련이 없다.


런타임에 dictionary를 확장시키고자 할 땐,

Kevin['New_Key'] = 'New_Value' 와 같은 식으로 항목을 추가할 수 있다.

================
반복문과 dict

for kv in found:
ㄴ>이때 kv 는 found 의 key 값을 순회한다.

for k,v in found.items() : 
ㄴ> dict의 items 함수는 반복문에 두개의 루프 변수를 반환한다.
ㄴ> 즉, found 에 존재하는 페어의 개수만큼 반복문이 돌며,
ㄴ> 이때 두개의 서로 다른 루프변수 k(key), v(value)를 사용할 수 있다는 것이다.

============
sorted(obj)

found 와 같은 dict, 그리고 list 와 같은 배열 객체는

sorted(obj)로 정렬시킬 수 있다. 

dict의 경우 key 값이 사전에 적힌 대로 정렬된다. 

==========
setdefault(key,n) 메서드

setdefault는 dict의 메서드이다.

key가 dict 안에 존재하지 않으면, n을 value로 갖는 key를 새로 생성한다. 

dict의 크기를 동적으로 확장하는 방식을 사용하고 싶을 때 이 메서드를 사용한다.

===========
집합

집합은 중복을 허용하지 않는, 순서 존재하지 않는 자료구조다. 중학교때 배운 그대로이다.

vowels = {'a','e','i','o','u'} 와 같이 선언한다.
또는 vowels = set('aeiouuiia') 라고 하여도 동일하게 생성된다 *중복을 걸러낼 줄 안다
ㄴ> dictionary와 비슷하게 중괄호를 쓴다.
ㄴ>set은 문자열로부터 집합을 만든다.

-
집합의 메서드들

vowels.union(obj) : obj와 vowels 의 합집합을 생성한다.
vowels.difference(obj) : vowels 로부터 obj 의 차집합을 얻는다.
vowels.intersection(obj) : 교집합을 얻는다.

*집합처리 이후 list로 바꾸고 싶다면, list(obj) 로 리스트 임시객체를 만들 수 있다.
*obj 안에는 문자열도, 집합도 들어갈 수있다는 것.

*집합은 특히 검색속도가 빠르다.

============
튜플

튜플은 소괄호 '()'를 사용하여 선언한다.

튜플은 const list 와 같다. pop 같은 메서드는 지원하지 않으며, 슬라이스 기능은 리스트와 똑같이 지원한다(슬라이스는 원본을 건드리지 않으므로)

ㄴ>C++과 같은 영역에서 const 변수가 함수의 매개변수로 전달되는 데 유용했던 점을 기억하자.




