# HFP
Head_First_Python


=======================
파이썬의 함수

def func_name(parameter):
  ...
  ...
  
  return whatever
  
이것이 파이썬 함수의 기본적인 구조다.
ㄴ>여러개의 매개변수는 쉼표로 구분되어 입력된다.

C++ 의 void 반환 함수와 같이, return 없이 사용할 수도 있다. 

입출력 자료의 형태를 명시하지 않아도 사용할 수 있다는 것이 특징이다.

======================
어노테이션

입출력 자료의 형태를 명시하는 것이 필요하다고 느껴 만들어진 기능이다.

어노테이션을 사용한 함수의 기본적인 구조는 다음과 같다.

def func_name(parameter:data1) -> data2:
  ...
  ...
  
  return whatever
  
=====================
디폴트값과 키워드할당

C++과 같이 매개변수에 기본값을 할당할 수 있다. 

함수 정의부분에 '=' 를 사용하여 할당하면 된다.

중복 문제는 C++ 에서와 마찬가지로 뒤에서부터 기본값을 할당하여 해결하는 것으로 보인다.


함수 호출 시에, 

func_name(parameter1 = data1 , parameter2 = data2) 

와 같이 사용하여 매개변수에 할당되는 데이터를 명확히 할 수 있다.

===========================
Module 에 대하여

import 명령어로 Module 을 가져올 때, 흔히 탐색하는 영역이 3가지 있다.

1. 현재 작업중인 디렉터리 <=지역

함수들이 포함된 .py 파일이 곧 모듈이다. 작업중인 디렉터리 내부의 .py 파일의 이름을 import 하면, 쉘에서 그 모듈 내부의 모든 함수를 사용할 수 있다.

2. 사이트 패키지 내부 <=전역

사이트 패키지 내부에는 우리가 설치한 서드 파티 모듈들이 포함된다. 

3. 표준 라이브러리(stl) 내부 <=전역

표준 라이브러리는 앞 장들에서 사용했던 rand, time 등 서브모듈을 포함하는 기본 제공 모듈이다.

==============================
사이트 패키지 - 사전작업

사이트 패키지는 서드 파티 모듈이 자리하는 영역이다. 

여기에 직접 만든 모듈을 포함시켜 보자.

현재 작업중인 디렉터리에 3개의 파일이 필요하다

1. setup.py : 설치에 필요한 setup 함수를 포함하는 파일

####

from setuptools import setup

setup(
  name = '배포 파일의 이름'  #모듈명을 사용하는 것이 일반적인 관습이다.
  version = '1. 0',
  description = '모듈의 간략한 설명',
  author = '본인 이름',
  author_email = '본인 이메일',
  url = '본인 홈페이지.com',
  py_modules = ['패키지에 포함된 파일 목록들'...]
  )
#####

2. README.txt : 모듈을 설명하기 위한 텍스트 파일. 구색 갖추기가 아니라 양식상 필수적으로 포함되어야 한다.
3. module_name.py : 함수들이 기술되어 있는 .py 파일

==================
사이트 패키지 - 생성

이 상태에서, cmd 로 해당 파일들이 모여있는 디렉터리에서 

>py -3 setup.py sdist

를 실행시키면, 디렉터리 하위에 세개 파일의 내용을 기반으로 한 항목이 몇가지 만들어진다.

dist 디렉터리 내부의 .gz 압축파일이 우리가 설치해야 할 모듈이다.

dist 디렉터리 내부로 이동해서,

py -3 -m pip install '압축파일 풀네임' 

을 실행시키면, 직접 만든 모듈이 사이트 패키지로 설치된다.
ㄴ>cmd 에서 위 명령어를 통해 tensorflow, pytest 와 같은 서드파티 모듈들을 사용할 수 있다!

이제 어느 디렉터리에서 파이썬을 사용 중이던 간에, import 로 해당 모듈을 사용할 수 있다.

=====================
pytest

pytest 모듈을 통해 나의 코드가 pep8을 만족하는지 테스트해 볼 수 있다.

C:\Mypy>py.test --pep8 vsearch.py

ㄴ> pytest 를 import 한 뒤, 위와 같은 코드로 Mypy 디렉터리 내부에 있는 vsearch 파일의 pep8 준수 여부를 검사할 수 있다.  
