# HFP
Head_First_Python

=========
import 의 문법

1. import datetime

이중 서브모듈 datetime 의 함수를 사용하려면, datetime.datetime.today() 의 꼴로 사용하게 된다.

date 의 경우 datetime.date.today()의 식이다.




2. from datetime import datetime

!!주의사항!! : 이후 코드에 등장하는 datetime들은 "서브모듈 datetime" 을 가리키는 것으로 간주된다. 

따라서, datetime.date.today() 와 같은 코드는 동작하지 못한다. 맨 앞의 datetime이 서브모듈이기 때문이다. 


datetime 서브모듈과 day 서브모듈을 모두 사용하고 싶으면, 모듈 datetime만 import 하여서, datetime.date // datetime.datetime 과 같은 식으로 풀어나가야 한다.
*이것은 마치 C++에서 using namespace 를 사용할 때 중복의 문제를 걱정해야 했던 것과 같은 맥락이다.


datetime 에서는 모듈 내부의 서브모듈 안에서 함수를 꺼내쓰고 있지만, sys와 같이 모듈 자체가 서브모듈 단계까지 내려가지 않고 함수를 지니고 있는 경우도 있다. 
=========
range(n) 함수 : 0~n-1 까지 등차가 1인 수열을 만들어낸다. 

for i in range(n) : i라는 반복인자가 0~n-1 의 양상으로 증가하며 명령문을 실행시킨다.

for i in range(start,stop,step) : start 에서부터 stop 까지 등차수열로, 등차는 step 으로 명령문을 실행시킨다.

*range 함수는 근본적으로 정수리스트를 만들어 i를 그 안에서 순회시키는 방식으로 작동된다.
만약 range 자리에 문자열(말하자면 char 리스트)를 집어넣으면, i는 내부의 문자를 한글자씩 읽으며 순회한다.






for 문은 명령문 실행 이전에 반복횟수를 알고 있어야만 제대로 사용할 수 있다.

반복 횟수가 결정되어 있지 않은 경우엔 while 문이 사용된다.
=========
help(함수) : 어떤 함수의 사용법을 문장으로 설명해 준다. 오버로드된 함수들의 설명까지 동봉되어 있다.

dir(모듈) : 모듈안에 포함된 함수들의 목록을 리스트로 나열한다. (서브모듈들의 이름은 나오지 아니한다)
=========


그 외 등장한 모듈들

datetime : 날짜와 시간에 대한 모듈

random : 난수에 대한 모듈

sys : 프로그램이 실행되는 시스템에 대한 동작을 하는 모듈





