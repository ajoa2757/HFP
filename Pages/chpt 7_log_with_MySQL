# HFP
Head_First_Python

MySQL 이라는 데이터베이스를 파이썬을 통해 사용하고 관리하는 법에 대해 배운다.

========================
많은 스트레스를 받았다. 헤드퍼스트 파이썬 책은 기본적으로 2010년대 초반의 환경을 가정하고 하고 있다.

그때에 비해 바뀐 문법들, 설치 방식 따위 때문에 많은 스트레스를 받았다.



-우선 MySQL 서비스가 실행되고 있어야 한다. 윈도우의 Services 를 실행하여 잘 작동하고 있는지 확인하였다.
ㄴ>처음 설치 과정에서 이 서비스가 실행되지 않은 채로 뒤의 동작들을 실행하려고 하다가 스트레스를 받았다.
ㄴ>처음 설치 시 원래는 자동으로 컴퓨터 시작과 동시에 MySQL 서비스가 동작하도록 되어 있다.

-C:\Program Files\MySQL\MySQL Server 8.0\bin 디렉토리에서 터미널 창을 통해 mysql 을 사용해 본다.
ㄴ>mysql 이라는 명령어가 저 디렉토리에서 사용되긴 하지만, 터미널은 디렉토리 내부에 존재하는 명령어를 디폴트로 실행시켜 주지 않는다.
ㄴ>대신, .\mysql 이라고 하여서 이 bin 디렉토리 내부에 있는 mysql 명령어를 사용하였다.

-데이터베이스를 create 명령어를 통해 만들고, 새로운 사용자를 만들어 거기에 grant 명령어로 모든 권한을 할당하였다.
ㄴ>이전 버전에서는 grant 명령어로 즉시 새로운 사용자를 만들 수 있었다.
ㄴ>하지만, 8.0 에서는 그것이 불법이기 때문에 create user 를 통해서 새로운 유저와 비밀번호를 손수 설정해 주어야만 했다.

-이제 이 database 에 table 을 생성해야 한다.
ㄴ>create 문법 역시 바뀌어서, 테이블의 명칭 앞에 소속 데이터베이스를 명시해 주어야 한다.
ㄴ>가령, vsearchDB.log 처럼 말이다. vsearchDB 데이터베이스에 소속된 log 테이블이다.

=================
권한 정리

DB 이름 :  vsearchDB

granted user 이름 : vsearch
granted user 비밀번호 : Kevinlee0!


ㄴ>서버의 root 계정으로 접속하여서, grant 문법을 통해 vsearch 계정에 권한을 부여하였다.
ㄴ>grant 문법으로 부여하는 권한은 계정에서 데이터베이스에 접근할 권한이다.

=================
Python 으로 데이터베이스 조작하기.

pip 를 통해 MySQL의 파이썬 커넥터를 설치할 수 있다.


conn = mysql.connector.connect(**dbconfig)
ㄴ> DB와 파이썬 사이의 연결 레퍼런스다. 

dbconfig = {'host': '127.0.0.1', 'user': 'vsearch', 'password': 'KevinLee0!', 'database': 'vsearchDB'}
ㄴ>connect 메서드에 매개변수로 전달된 변수 dbconfig다.
ㄴ>하나의 변수 대신 딕셔너리가 입력되고 있다. **은 그 부분을 인지시키기 위한 것.
ㄴ>dbconfig 에는 MySQL 로그인에 필요한 ip, 계정 정보, 타깃 데이터베이스 등이 기록되어 있음을 확인할 수 있다.


cursor = conn.cursor()
ㄴ>본격적으로 명령을 보내고 결과를 받기 위한 것이다. 6장의 with 문에서 사용하던 파일 핸들과 비슷한 포지션을 가지고 있다.
ㄴ>cursor 변수에 전달된 SQL질의(=명령문) 가 데이터베이스를 작동시킨다.


=======================
SQL 질의전달

책에서는 _SQL = "질의" 식으로 명령을 설정하고, 이 질의 변수를 cursor의 execute 에 전달한다.

책에서는 예시로 describe log, insert 등의 질의를 사용해본다.

1. _SQL = """show tables"""
cursor.execute(_SQL)
res = cursor.fetchall()

ㄴ> 첫번째 행에서는, _SQL 에 질의가 전달되고 있다. 두번째 행에서는 그 질의가 실행된다.
ㄴ> 세번째 행애서는 완료된 작업의 결과가 res 에 전달되었다. 
ㄴ>res를 직접 출력하여 table 의 목록을 얻었다. 여기에선 log 한개만 표시.


_SQL = """describe obj"""
ㄴ>가령, log 라는 table 을 설명하라고 하면, 그 표의 field 에 들어갈 value 들의 자료형, 기본값 등이 설명된다.
ㄴ>위에 적힌 대로 python connector 를 통해 설명되는 경우엔, 보기 좋지 않다.
ㄴ>커서의 fetchall 을 통해 결과를 볼 때, 반복인자를 사용하여 보는 편이 보기에 아름답다.


_SQL = """insert into log
... (phrase, letters, ip, browser_string, results)
... values
... (%s, %s, %s, %s, %s)"""

ㄴ> 터미널 안에 "파이썬 문법으로" 입력한 내용이다.
ㄴ> 앞 괄호의 field 들과 뒷 괄호의 value 가 구분되어 있는것이 보인다.
ㄴ> field 항들은 잘 보면, 앞서 table 에 입력되었던 field 항목들이다. 저 순서대로 value들이 입력된다.
ㄴ> value 항은 %s 로 스트링 플레이스홀더(=변수) 가 들어가 있다.
ㄴ> 웹 페이지로부터 스트링 값이 전달되어 로그가 만들어질 것이다. 

cursor.execute(_SQL, ('hitch-hiker', 'aeiou', '127.0.0.1', 'Safari', 'set()'))

ㄴ>_SQL 질의가 이번에는 매개변수를 필요로 하기 때문에, execute 함수에 매개변수 튜플이 전달되었다.
ㄴ>execute 는 위와 같이 최대 2개의 변수 - 질의 항과 매개변수가 담긴 튜플 - 만을 매개변수로 받는다. 

====================
insert 의 캐시

데이터베이스에 값이 입력되는 연산은 비싼 연산이다.

따라서, SQL 을 포함한 많은 데이터베이스 체계는 insert 문을 캐시하였다가 한번에 처리한다.

이로 인해서, select 질의로 데이터베이스를 확인하였을 때 업데이트가 되어 있지 않을 수 있다.


연결 레퍼런스의 commit() 메서드는 캐시에 남아 있는 모든 데이터를 테이블로 즉시 입력한다.

conn.commit()
_SQL = """select * from log"""
cursor.execute(_SQL)

ㄴ>저 질의로 cursor 가 log 안의 데이터들을 가리킨다. (*는 다른 문법에서 유추하건데 SQL 문법으로 '전부'를 가리키는 표현인 듯 하다?)
ㄴ>cursor.fetchall() 로 가리키는 데이터들을 확인한다. 
ㄴ>역시 반복문을 사용하여 더 잘 볼 수 있다.

=======================
커서와 연결레퍼런스 닫기

cursor.close()
conn.close()
ㄴ>커서와 연결레퍼런스를 순서대로 닫아 주어야 한다.



======================
view_log 는?


앞서 배운 것들로, 파이썬 코드의 log_request 함수를 수정하였다. 
*log_request 함수는 /search4 URL 에서 로그를 입력하는 부분을 담당하고 있다.

텍스트형 .log 파일 대신, MySQL 데이터베이스의 log 라는 table 에 정보가 입력되도록 수정되었다.


그런데, view_log 는 어떻게 수정할 것인가? 


MySQL 에서 데이터를 뽑아 와야 하므로, 다음의 선행 작업들은 그대로 카피될 수 있다.
0. 데이터베이스 접속에 필요한 dbconfig
1. 연결 레퍼런스 conn, 커서 cursor 의 생성과 
2. 

