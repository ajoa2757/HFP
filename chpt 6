# HFP
Head_First_Python

=========================
데이터 다루기 - 파일

데이터 스트림이란 ? : 파일의 입출력 단계 사이의 어딘가에 있는 중간자. 


task = open(name,method) 
: name은 열고자 하는 파일의 이름을, method는 목적을 나타낸다.(default 는 읽기)
: open 은 파일 스트림을 반환한다. 파일 스트림 임시객체를 반환한다.

이렇게 생성한 파일 스트림은, 주어진 method 작업을 name 파일에 가할 수 있는 권한을 가진다.

print('put out the trash',file = task)
: print는 출력 함수이다. 이 함수는 프롬프트에 출력을 하는 것이 일반적이다.
: file = task 매개변수가 전달되면서, 출력 목적지는 task 스트림이 가리키는 name 이라는 파일이 된다.
: 출력된 문자열은, name 파일에 전달되어 put out the trash 가 입력되는 식이다. 

task.close()
: open 으로 생성된 파일 스트림은 반드시 close 를 통해 닫아져야만 한다


====================
데이터 읽기

name 파일에 print 를 통해 몇 행의 문자열이 입력되었다고 하자.

입력 모드로 생성된 스트림을 닫고, 다시 읽기 모드(=디폴트)로 스트림을 새로 연다.

for chores in task:
  print(chores)
  
위 작업은, task 안에 입력된 몇 행의 문자열들을 한 행식 출력한다.
*이때 특이한 점은, 문자열 끝의 \n 이 개행문자로 인지되면서, 행들이 출력되면서 한 행씩 띄어쓰기가 된다.
print(chores,end = '')를 추가하면 이와 같은 현상이 일어나지 아니한다. 

chores 에 task 내부의 문자열이 한 행씩 돌아가면서 할당된다.

=============
with 으로 스트림 사용하기

with open(name, method) as tasks:
  ...
  ...
  
위와 같은 방법으로 tasks 에 할당된 파일 스트림을 사용하게 되면, with 스위트가 닫힐 때 close 가 알아서 호출된다.


tasks.read() : tasks가 가르키는 파일의 모든 내용을 문자열로 만들어 반환한다. 
ㄴ>str 객체에 할당하여 return 한다던가 하는 식으로 사용한다.

==============
escape 함수

html 에서 문자열의 특수기호를 취급하는 방식이 당연히 존재한다.

이때 사용하는 것이 Markup 양식이다. 이것은 파이썬에서 문자열과 마찬가지로 취급된다.


str 자료구조를 escape() 의 매개변수로 사용하면 Markup이 반환된다.

==============
log 와 반복문

log 라는 스트림이 vsearch.log 파일을 가리키고 있다고 하자. with 으로 이 스트림을 사용하고 있는 상태다.

스트림 log 를 반복문으로 순회하게 되면, 반복 인자는 log 안에 있는 문자열을 한 행씩 순회한다.

=============
문자열과 리스트 오가기

리스트의 item 들을 ''.join(nList) 하게 되면, 

1. nList 내부의 item 들이 나눠진다
2. 따옴표 안에 있는 구분자들이 나눠진 item들 사이로 삽입된다.
3. 위의 요소들이 합쳐진 큰 문자열이 하나 만들어진다.

이것을 반대로 되돌리는 문자열의 split 동작이 있다.

nstring.split('|') 을 하게 되면,

1. 문자열 내부의 '|' 들의 위치가 탐색된다
2. 그 사이사이의 작은 문자열들이 새로운 list의 item 들이 된다리스

================
viewlog URL 만들기


위 항목에서 다시 상기한 바들을 사용하여 로그를 웹 사이트에 표시해 보자.

1. 파일 스트림에 print 함수를 사용하여 로그를 기록한다.
2. 이 때, print 함수의 end 매개변수에 구분자를 삽입한다.
3. 이렇게 만들어진 한 회차의 line 문자열이 log 의 한 행을 구성한다.

4. log 파일 스트림에 반복문을 사용하여 line 매개변수를 통해 한 행씩 가공하여 출력한다.
5. 이중 리스트를 생성하고, line 의 item 들을 내부 리스트에 기록한다.
6. 반복문이 종료되면 이중 리스트 내부에 한 행씩 log 가 리스트 자료구조의 형태로 append 된다.
7. 이 때, append 하기 이전에 item 들은 escape 를 통해서 Markup 으로 변환되어야 한다.

7. 우리는 이중 리스트 형태로 정리된 로그를 가지고 있다.
8. html 에 이 이중 리스트를 매개변수로 전달한다.
9. html 코드에 전달된 이중 리스트를 이중 반복문을 통해 보기좋게 출력한다.







